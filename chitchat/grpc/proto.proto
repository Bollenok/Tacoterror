syntax = "proto3";

package chitchat.v1;

option go_package = "tacoterror/chitchat/grpc/proto;proto";

service ChitChat {
  // Bi-directional stream:
  // - Client sends Join / ChatMessage / Leave messages.
  // - Server streams Broadcast messages to clients and may send Ack/Error directed to the sender.
  rpc Chat(stream ClientMessage) returns (stream ServerMessage);
}

message ClientMessage {
  oneof kind {
    Join join = 1;
    ChatMessage chat = 2;
    Leave leave = 3;
  }
}

message ServerMessage {
  oneof kind {
    Broadcast broadcast = 1;
    Ack ack = 2;
    Error error = 3;
  }
}

message Join {
  string name = 1;
  int64 logical_time = 2;
}

message ChatMessage {
  // UTF-8 text, max 128 characters (enforce/validate on server or with protoc-gen-validate)
  string text = 1;
  string sender = 2;
  int64 logical_time = 3; // Lamport/sequence time if used by protocol
}

message Leave {
  string name = 1;
  int64 logical_time = 2;
}

enum BroadcastType {
  BROADCAST_MESSAGE = 0;
  BROADCAST_JOIN = 1;
  BROADCAST_LEAVE = 2;
}

message Broadcast {
  BroadcastType type = 1;
  string sender = 2;
  string text = 3;
  int64 logical_time = 4;
}

message Error {
  int32 code = 1;       // numeric error code (consider google.rpc.Status for richer errors)
  string message = 2;   // human-readable error message
}

message Ack {
  string info = 1; // optional info (e.g. "joined", "ok")
}